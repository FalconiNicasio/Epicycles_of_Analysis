top_n(10)
df.clustered %>%
arrange(desc(C4)) %>%
select(model, category1, category2, frame, price, C4) %>%
top_n(10)
#create cluster df
cluster1 <- cbind(df[names(kclusters[kclusters == 1])], price = df$price)
cluster2 <- cbind(df[names(kclusters[kclusters == 2])], price = df$price)
cluster3 <- cbind(df[names(kclusters[kclusters == 3])], price = df$price)
cluster4 <- cbind(df[names(kclusters[kclusters == 4])], price = df$price)
ggplot(cluster1) +
geom_histogram(aes(x = price))
ggplot(cluster1) +
geom_point(aes(x = price, y = tmp$value))
diag <- data.frame(residuals = resid(tmp_glm), fitted = fitted(tmp_glm))
ggplot(diag) +
geom_point(aes(x=fitted, y = residuals)) +
geom_hline(aes(y =0))
ggplot(diag) +
geom_point(aes(x=fitted, y = residuals)) +
geom_hline(aes(yintercept =0))
ggplot(tmp) +
geom_histogram(aes(x = sales))
ggplot(cluster1) +
geom_histogram(aes(x = Cincinnati.Speed))
ggplot(tmp) +
geom_histogram(aes(x = sales))
poisson_glm <- glm(sales ~ price, data = tmp, family = "poisson")
dispersion(poisson_glm, modeltype = "poisson")
summary(poisson_glm)
View(poisson_glm)
gaussian_glm <- glm(sales ~ price, data = tmp, family = "gaussian")
summary(gaussian_glm)
View(df)
pr_fac(gaussian_glm, df$frame, xlabel = "frame", modeltype = "gaussian")
tmp2 <- melt(cluster2, id.vars = "price", variable.name = "vendor", value.name = "sales")
library(reshape2)
tmp2 <- melt(cluster2, id.vars = "price", variable.name = "vendor", value.name = "sales")
fit_2 = lm(sales ~ price, data= tmp2)
ggplot(tmp2) +
geom_point(aes(x = price, y = sales)) +
geom_abline(aes(x = fit_2), data = fit_2)
?geom_abline
tmp2 <- melt(cluster2, id.vars = "price", variable.name = "vendor", value.name = "sales")
ggplot(tmp2) +
geom_point(aes(x = price, y = sales)) +
geom_smooth(method = "lm", formula = sales ~ price)
tmp2 <- melt(cluster2, id.vars = "price", variable.name = "vendor", value.name = "sales")
ggplot(tmp2) +
geom_point(aes(x = price, y = sales)) +
geom_smooth(aes(x = price, y = sales), method = "lm", formula = sales ~ price)
ggplot(tmp2) +
geom_point(aes(x = price, y = sales))
ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
tmp3 <- melt(cluster3, id.vars = "price", variable.name = "vendor", value.name = "sales")
ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
tmp4 <- melt(cluster4, id.vars = "price", variable.name = "vendor", value.name = "sales")
ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(cluster1) +
geom_point(aes(x = price, y = tmp$value))
ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
?corrplot
??corrplot
View(df.t)
library(corrplot)
res <- cor(df.t[-(1:5),])
df.t[-(1:5),]
View(df)
df[ ,-(1:5)]
library(corrplot)
res <- cor(df[ ,-(1:5)])
corrplot(res)
corrplot(res, type = "upper", order = "hclust")
corrplot(res, type = "upper", order = "hclust", tl.col = "black", tl.cex = 2)
corrplot(res, type = "upper", order = "hclust", tl.col = "black", tl.cex = .02)
corrplot(res, type = "upper", order = "hclust", tl.col = "black", tl.cex = .07)
corrplot(res, type = "upper", order = "hclust", tl.col = "black", tl.cex = .5)
corrplot(res, type = "upper", tl.col = "black", tl.cex = .5)
library(purrr)
set.seed(1234)
tot_withinss <- map_dbl(1:10, function(k){
model <- kmeans(x = df.t[-(1:5),], centers = k)
model$tot.withinss
})
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 1:10) +
ggtitle("Elbow (Scree) Plot") +
xlab("k (centers)") +
ylab("Total within-cluster sum of squares")
par(mfrow = c(1, 2))
ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
library(reshape2)
tmp1 <- melt(cluster1, id.vars = "price", variable.name = "vendor", value.name = "sales")
par(mfrow = c(1, 2))
ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
par(mfrow = 2)
par(mfrow = c(2,2))
ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
library(gridExtra)
grid1 <- ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid2 <- ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid3 <- ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid4 <- ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid.arrang(c(grid1, grid2, grid3, grid4))
grid.arrange(c(grid1, grid2, grid3, grid4))
grid.arrange(grid1, grid2, grid3, grid4, nrow = 2)
ggplot(tmp1) +
geom_histogram(aes(x = sales))
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales))
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales))
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales))
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales))
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
View(df.clustered)
View(tmp1)
library(lmtest)
fit_1 <- lm(sales ~ price, data = tmp1)
fit_2 <- lm(sales ~ price, data = tmp2)
fit_3 <- lm(sales ~ price, data = tmp3)
fit_4 <- lm(sales ~ price, data = tmp4)
bptest(fit_1)
bptest(fit_2)
bptest(fit_3)
bptest(fit_4)
set.seed(1234)
shapiro.test(fit_1)
set.seed(1234)
shapiro.test(resid(fit_1))
shapiro.test(resid(fit_2))
shapiro.test(resid(fit_3))
shapiro.test(resid(fit_4))
log_fit1 <- lm(log(sales) ~ price, data = tmp1)
log_fit1 <- lm(log(sales) ~ price, data = tmp1)
log_fit1 <- lm(log(sales*100) ~ price, data = tmp1)
tmp[sales == 0]
tmp1[sales == 0]
View(tmp1)
tmp1[tmp1$sales == 0]
tmp1$sales == 0
sum(tmp1$sales == 0)
set.seed(1234)
shapiro.test(resid(fit_1))
shapiro.test(resid(fit_2))
shapiro.test(resid(fit_3))
shapiro.test(resid(fit_4))
grid1 <- ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid2 <- ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid3 <- ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid4 <- ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid.arrange(grid1, grid2, grid3, grid4, nrow = 2)
sum(tmp1$sales == 0)
sum(tmp1$sales == 0)
tmp1_no <- tmp1[tmp1$sales != 0]
sum(tmp1$sales == 0)
tmp1_no <- tmp1[tmp1$sales != 0,]
sum(tmp1_no$sales == 0)
View(tmp1_no)
tmp1_no <- tmp1[tmp1$sales != 0,]
fit_1no <- lm(sales ~ price, data = tmp1_no)
shapiro.test(resid(fit_1no))
?boxplot
boxplot(price, data = df)
boxplot(x = "price", data = df)
boxplot(count ~ price, data = df)
boxplot(df$price)
tmp1_no <- tmp1[tmp1$price <= 10000,]
fit_1no <- lm(sales ~ price, data = tmp1_no)
shapiro.test(resid(fit_1no))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- as.data.frame(lapply(tmp1, normalize))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- as.data.frame(lapply(tmp1$sales, normalize), tmp1$price)
View(tmp1_no)
tmp1_no <- as.data.frame(apply(tmp1$sales, normalize), tmp1$price)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- cbind(lapply(tmp1$sales, normalize), tmp1$price)
fit_1no <- lm(sales ~ price, data = tmp1_no)
View(tmp1_no)
tmp1_no <- as.data.frame(cbind(lapply(tmp1$sales, normalize), tmp1$price))
View(tmp1_no)
tmp1_no <- as.data.frame(cbind(apply(tmp1$sales, normalize), tmp1$price))
tmp1[1]
tmp1[2]
tmp1[3]
tmp1_no <- as.data.frame(cbind(lapply(tmp1[3], normalize), tmp1$price))
tmp1_no <- as.data.frame(cbind(lapply(tmp1[,3], normalize), tmp1$price))
tmp1_no <- as.data.frame(cbind(apply(tmp1[,3], normalize), tmp1$price))
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- as.data.frame(cbind(lapply(tmp1[,3], normalize), tmp1$price))
fit_1no <- lm(sales ~ price, data = tmp1_no)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- as.data.frame(cbind(sales = lapply(tmp1[,3], normalize), price = tmp1$price))
fit_1no <- lm(sales ~ price, data = tmp1_no)
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
tmp1_no <- as.data.frame(cbind(sales = lapply(tmp1[3], normalize), price = tmp1$price))
fit_1no <- lm(sales ~ price, data = tmp1_no)
tmp1_no <- as.data.frame(cbind(sales = normalize(tmp1[,3], method="standardize"), price = tmp1$price))
tmp1_no <- as.data.frame(cbind(sales = normalize(tmp1[,3]), price = tmp1$price))
tmp1_no <- as.data.frame(cbind(sales = normalize(tmp1[,3]), price = tmp1$price))
fit_1no <- lm(sales ~ price, data = tmp1_no)
shapiro.test(resid(fit_1no))
tmp1[3]
tmp1_no <- as.data.frame(cbind(sales = normalize(tmp1[,3]), price = tmp1$price))
fit_1no <- lm(sales ~ price, data = tmp1_no)
shapiro.test(resid(fit_1no))
par(mfrow = c(2,2))
qqnorm(resid(fit_1), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_1), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_2), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_2), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_3), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_3), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_4), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_4), col = "dodgerblue", lwd = 2)
par(mfrow = c(2,2))
qqnorm(resid(fit_1), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_1), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_2), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_2), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_3), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_3), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_4), main = "Normal Q-Q Plot, fit_1", col = "darkgrey")
qqline(resid(fit_4), col = "dodgerblue", lwd = 2)
par(mfrow = c(2,2))
qqnorm(resid(fit_1), main = "Normal Q-Q Plot, Cluster 1", col = "darkgrey")
qqline(resid(fit_1), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_2), main = "Normal Q-Q Plot, Cluster 2", col = "darkgrey")
qqline(resid(fit_2), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_3), main = "Normal Q-Q Plot, Cluster 3", col = "darkgrey")
qqline(resid(fit_3), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_4), main = "Normal Q-Q Plot, Cluster 4", col = "darkgrey")
qqline(resid(fit_4), col = "dodgerblue", lwd = 2)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales))
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales))
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales))
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales))
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
grid1 <- ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid2 <- ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid3 <- ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid4 <- ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm")
grid.arrange(grid1, grid2, grid3, grid4, nrow = 2)
library(tidyverse)
library(purrr)
set.seed(1234)
tot_withinss <- map_dbl(1:10, function(k){
model <- kmeans(x = df.t[-(1:5),], centers = k)
model$tot.withinss
})
elbow_df <- data.frame(
k = 1:10,
tot_withinss = tot_withinss
)
theme_update(plot.title = element_text(hjust = 0.5))
ggplot(elbow_df, aes(x = k, y = tot_withinss)) +
geom_line() +
geom_point() +
scale_x_continuous(breaks = 1:10) +
ggtitle("Elbow (Scree) Plot") +
xlab("k (centers)") +
ylab("Total within-cluster sum of squares")
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 2")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 3")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 4")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
grid1 <- ggplot(tmp1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 1") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid2 <- ggplot(tmp2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 2") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid3 <- ggplot(tmp3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 3") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid4 <- ggplot(tmp4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 4") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid.arrange(grid1, grid2, grid3, grid4, nrow = 2)
library(corrplot)
res <- cor(df[ ,-(1:5)])
corrplot(res, type = "upper", tl.col = "black", tl.cex = .5, order = "hclust")
knitr::opts_chunk$set(echo = TRUE)
head(df)
library(corrplot)
res <- cor(df[ ,-(1:5)])
corrplot(res, type = "upper", tl.col = "black", tl.cex = .5, order = "hclust")
View(cluster1)
View(tmp1)
View(tmp1)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
library(tidyverse)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
View(fit_1)
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
library(tidyverse)
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales)) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
c1 <- df.clustered %>%
arrange(desc(C1)) %>%
select(model, category1, category2, frame, price, C1) %>%
top_n(10)
c1
library(knitr)
kable(df.clustered %>%
arrange(desc(C1)) %>%
select(model, category1, category2, frame, price, C1) %>%
top_n(10))
set.seed(1234)
kmeans_model <- kmeans(x = df.t[-(1:5),], centers = 4)
kclusters <- kmeans_model$cluster
tmpdf <- df.t[-(1:5),]
tmpdf$cluster <- kclusters
library(knitr)
kable(count(tmpdf, cluster))
```{r cluster1}
