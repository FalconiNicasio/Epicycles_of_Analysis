ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
scaled.dat1 <- as.data.frame(scale(tmp1[c(1,3)]))
scaled.dat2 <- as.data.frame(scale(tmp2[c(1,3)]))
scaled.dat3 <- as.data.frame(scale(tmp3[c(1,3)]))
scaled.dat4 <- as.data.frame(scale(tmp4[c(1,3)]))
library(gridExtra)
hist1 <- ggplot(scaled.dat1) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(scaled.dat2) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(scaled.dat3) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(scaled.dat4) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
# create linear models
fit_1 <- lm(sales ~ price, data = scaled.dat1)
fit_2 <- lm(sales ~ price, data = scaled.dat2)
fit_3 <- lm(sales ~ price, data = scaled.dat3)
fit_4 <- lm(sales ~ price, data = scaled.dat4)
par(mfrow = c(2,2))
plot(fitted(fit_1), resid(fit_1), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 1)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(fit_2), resid(fit_2), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 2)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(fit_3), resid(fit_3), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 3)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(fit_4), resid(fit_4), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 4)")
abline(h = 0, col = "dodgerblue", lwd = 2)
par(mfrow = c(2,2))
qqnorm(resid(fit_1), main = "Normal Q-Q Plot, Cluster 1", col = "darkgrey")
qqline(resid(fit_1), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_2), main = "Normal Q-Q Plot, Cluster 2", col = "darkgrey")
qqline(resid(fit_2), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_3), main = "Normal Q-Q Plot, Cluster 3", col = "darkgrey")
qqline(resid(fit_3), col = "dodgerblue", lwd = 2)
qqnorm(resid(fit_4), main = "Normal Q-Q Plot, Cluster 4", col = "darkgrey")
qqline(resid(fit_4), col = "dodgerblue", lwd = 2)
library(lmtest)
bptest(fit_1)
bptest(fit_2)
bptest(fit_3)
bptest(fit_4)
grid1 <- ggplot(scaled.dat1, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 1") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid2 <- ggplot(scaled.dat2, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 2") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid3 <- ggplot(scaled.dat3, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 3") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid4 <- ggplot(scaled.dat4, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 4") +
xlab("Price ($)") +
ylab("Sales (percentage")
grid.arrange(grid1, grid2, grid3, grid4, nrow = 2)
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
library(gridExtra)
hist1 <- ggplot(tmp1) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 1") +
xlab("Sales (percentage)")
hist2 <- ggplot(tmp2) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 2") +
xlab("Sales (percentage)")
hist3 <- ggplot(tmp3) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 3") +
xlab("Sales (percentage)")
hist4 <- ggplot(tmp4) +
geom_histogram(aes(x = sales),bins = 50) +
ggtitle("Sales Distribution, Cluster 4") +
xlab("Sales (percentage)")
grid.arrange(hist1, hist2, hist3, hist4, nrow = 2)
kable(count(x, cluster)) %>%
kable_styling(full_width = FALSE, position = "left", font_size = 11)
library(lmtest)
bptest(fit_1)
bptest(fit_2)
bptest(fit_3)
bptest(fit_4)
bptest(fit_1)
bptest(fit_2)
bptest(fit_3)
bptest(fit_4)
par(mfrow = c(2,2))
hist(resid(fit_1),
xlab = "Residuals",
main = "Histogram of Residuals, fit_1",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
hist(resid(fit_2),
xlab = "Residuals",
main = "Histogram of Residuals, fit_2",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
hist(resid(fit_3),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
hist(resid(fit_4),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "dodgerblue",
breaks = 20)
par(mfrow = c(2,2))
hist(resid(fit_1),
xlab = "Residuals",
main = "Histogram of Residuals, fit_1",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_2),
xlab = "Residuals",
main = "Histogram of Residuals, fit_2",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_3),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_4),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "black",
breaks = 20)
rstandard(fit_1)[abs(rstandard(fit_1)) > 2]
index(rstandard(fit_1)[abs(rstandard(fit_1)) > 2])
rstandard(fit_1)[abs(rstandard(fit_1)) > 2]
rstandard(fit_1)[abs(rstandard(fit_1)) > 2][1]
names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2])
rstandard(fit_1)[abs(rstandard(fit_1)) > 2]
names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2])
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
ifelse(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1)),
inf1[i] <- outliers1[i])
}
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1[i] <- outliers1[i]
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1[i] <- outliers1[i]
} else {}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
append(inf1, outliers1[i])
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
c(inf1, outliers1)
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
c(outliers1, inf1)
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1 <- c(outliers1)
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1 <- c(outliers1[i])
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
c(inf1, outliers1[i])
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1 <-c(outliers1[i])
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
print(outliers1[i])
}
}
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
append(inf1, outliers1[i])
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- c()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
append(inf1, outliers1[i], 0)
}
}
inf1
outliers1 <- as.integer(names(rstandard(fit_1)[abs(rstandard(fit_1)) > 2]))
inf1 <- numeric()
for (i in 1:length(outliers1)) {
if(cooks.distance(fit_1)[outliers1[i]] > 4/length(cooks.distance(fit_1))) {
inf1 <- c(inf1, outliers1[i])
}
}
inf1
resid(fit_1)[inf1]
View(scaled.dat1)
scaled.dat1[inf1]
scaled.dat1[,inf1]
scaled.dat1[inf1,]
test <- scaled.dat1[-inf1,]
testfit <- lm(sales ~ price, data = test)
plot(fitted(testfit), resid(testfit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 1)")
abline(h = 0, col = "dodgerblue", lwd = 2)
testfit <- lm(sales ~ price, data = test)
plot(fitted(testfit), resid(testfit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 1)")
abline(h = 0, col = "dodgerblue", lwd = 2)
bptest(testfit)
hist(resid(testfit),
xlab = "Residuals",
main = "Histogram of Residuals, fit_1",
col = "darkorange",
border = "black",
breaks = 20)
qqnorm(resid(testfit), main = "Normal Q-Q Plot, Cluster 1", col = "darkgrey")
qqline(resid(testfit), col = "dodgerblue", lwd = 2)
ggplot(test, aes(x = price, y = sales)) +
geom_point() +
geom_smooth(method = "lm") +
ggtitle("Regression Plot, Cluster 1") +
xlab("Price") +
ylab("Sales")
inf1 <- get_inf_outliers(fit_1)
get_inf_outliers <- function(x) {
outliers <- as.integer(names(rstandard(x)[abs(rstandard(x)) > 2]))
inf <- numeric()
for (i in 1:length(outliers)) {
if(cooks.distance(x)[outliers[i]] > 4/length(cooks.distance(x))) {
inf <- c(inf, outliers[i])
}
}
}
inf1 <- get_inf_outliers(fit_1)
inf1
get_inf_outliers <- function(x) {
outliers <- as.integer(names(rstandard(x)[abs(rstandard(x)) > 2]))
inf <- numeric()
for (i in 1:length(outliers)) {
if(cooks.distance(x)[outliers[i]] > 4/length(cooks.distance(x))) {
inf <- c(inf, outliers[i])
return(inf)
}
}
}
inf1 <- get_inf_outliers(fit_1)
inf1
get_inf_outliers <- function(x) {
outliers <- as.integer(names(rstandard(x)[abs(rstandard(x)) > 2]))
inf <- numeric()
for (i in 1:length(outliers)) {
if(cooks.distance(x)[outliers[i]] > 4/length(cooks.distance(x))) {
inf <- c(inf, outliers[i])
return(inf)
}
}
}
inf1 <- get_inf_outliers(fit_1)
inf1
get_inf_outliers <- function(x) {
outliers <- as.integer(names(rstandard(x)[abs(rstandard(x)) > 2]))
inf <- numeric()
for (i in 1:length(outliers)) {
if(cooks.distance(x)[outliers[i]] > 4/length(cooks.distance(x))) {
inf <- c(inf, outliers[i])
}
}
return(inf)
}
inf1 <- get_inf_outliers(fit_1)
inf1
inf1 <- get_inf_outliers(fit_1)
inf2 <- get_inf_outliers(fit_2)
inf3 <- get_inf_outliers(fit_3)
inf4 <- get_inf_outliers(fit_4)
clean.dat1 <- scaled.dat1[-inf1,]
clean.dat2 <- scaled.dat1[-inf2,]
clean.dat3 <- scaled.dat1[-inf3,]
clean.dat4 <- scaled.dat1[-inf4,]
clean.fit_1 <- lm(sales ~ price, data = clean.dat1)
clean.fit_2 <- lm(sales ~ price, data = clean.dat2)
clean.fit_3 <- lm(sales ~ price, data = clean.dat3)
clean.fit_4 <- lm(sales ~ price, data = clean.dat4)
par(mfrow = c(2,2))
hist(resid(fit_1),
xlab = "Residuals",
main = "Histogram of Residuals, fit_1",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_2),
xlab = "Residuals",
main = "Histogram of Residuals, fit_2",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_3),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(fit_4),
xlab = "Residuals",
main = "Histogram of Residuals, fit_3",
col = "darkorange",
border = "black",
breaks = 20)
par(mfrow = c(2,2))
hist(resid(clean.fit_1),
xlab = "Residuals",
main = "Histogram of Residuals, Cluster 1",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(clean.fit_2),
xlab = "Residuals",
main = "Histogram of Residuals, Cluster 2",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(clean.fit_3),
xlab = "Residuals",
main = "Histogram of Residuals, Cluster 3",
col = "darkorange",
border = "black",
breaks = 20)
hist(resid(clean.fit_4),
xlab = "Residuals",
main = "Histogram of Residuals, Cluster 4",
col = "darkorange",
border = "black",
breaks = 20)
par(mfrow = c(2,2))
plot(fitted(clean.fit_1), resid(fit_1), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 1)")
par(mfrow = c(2,2))
plot(fitted(clean.fit_1), resid(clean.fit_1), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 1)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(clean.fit_2), resid(clean.fit_2), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 2)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(clean.fit_3), resid(clean.fit_3), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 3)")
abline(h = 0, col = "dodgerblue", lwd = 2)
plot(fitted(clean.fit_4), resid(clean.fit_4), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted vs Residuals (Cluster 4)")
abline(h = 0, col = "dodgerblue", lwd = 2)
par(mfrow = c(2,2))
qqnorm(resid(clean.fit_1), main = "Normal Q-Q Plot, Cluster 1", col = "darkgrey")
qqline(resid(clean.fit_1), col = "dodgerblue", lwd = 2)
qqnorm(resid(clean.fit_2), main = "Normal Q-Q Plot, Cluster 2", col = "darkgrey")
qqline(resid(fit_2), col = "dodgerblue", lwd = 2)
qqnorm(resid(clean.fit_3), main = "Normal Q-Q Plot, Cluster 3", col = "darkgrey")
qqline(resid(clean.fit_3), col = "dodgerblue", lwd = 2)
qqnorm(resid(clean.fit_4), main = "Normal Q-Q Plot, Cluster 4", col = "darkgrey")
qqline(resid(clean.fit_4), col = "dodgerblue", lwd = 2)
plot(clean.dat1)
par(mfrow = c(2,2))
plot(clean.dat1, col = "grey", pch = 20, main = "Reression Plot (Cluster 1)")
abline(clean.fit_1, col = "dodgerblue", lwd = 3)
par(mfrow = c(2,2))
plot(clean.dat1, col = "grey", pch = 20, main = "Regression Plot (Cluster 1)")
abline(clean.fit_1, col = "dodgerblue", lwd = 3)
plot(clean.dat2, col = "grey", pch = 20, main = "Regression Plot (Cluster 2)")
abline(clean.fit_2, col = "dodgerblue", lwd = 3)
plot(clean.dat3, col = "grey", pch = 20, main = "Regression Plot (Cluster 3)")
abline(clean.fit_3, col = "dodgerblue", lwd = 3)
plot(clean.dat4, col = "grey", pch = 20, main = "Regression Plot (Cluster 4)")
abline(clean.fit_4, col = "dodgerblue", lwd = 3)
tmp1[,inf1]
tmp1[inf1,]
View(tmp1)
View(cluster1)
View(cluster1)
View(df)
View(cluster1)
#create cluster df
cluster1 <- cbind(model = df$model, df[names(kclusters[kclusters == 1])], price = df$price)
View(cluster1)
library(reshape2)
tmp1 <- melt(cluster1, id.vars = "price", variable.name = "vendor", value.name = "sales")
tmp2 <- melt(cluster2, id.vars = "price", variable.name = "vendor", value.name = "sales")
tmp3 <- melt(cluster3, id.vars = "price", variable.name = "vendor", value.name = "sales")
tmp4 <- melt(cluster4, id.vars = "price", variable.name = "vendor", value.name = "sales")
View(tmp1)
?melt()
tmp1 <- melt(cluster1, id.vars = "model", variable.name = "vendor", value.name = "sales")
tmp1 <- melt(cluster1, id.vars = "model", variable.name = c("vendor","price"), value.name = "sales")
x = data.frame(
id   = c(1, 1, 2, 2),
blue = c(1, 0, 1, 0),
red  = c(0, 1, 0, 1)
)
# collapse the data frame
melt(data = x, id.vars = "id", measure.vars = c("blue", "red"))
tmp1 <- melt(cluster1, id.vars = c("model", "vendor"), measure.vars = c("sales", "price"))
View(tmp1)
tmp1 <- melt(cluster1, id.vars = c("model"), measure.vars = c("sales", "price"))
tmp1 <- melt(cluster1, id.vars = c("model", "price"), variable.name = "vendor", value.name = "sales")
tmp2 <- melt(cluster2, id.vars = c("model","price"), variable.name = "vendor", value.name = "sales")
#create cluster df
cluster1 <- cbind(model = df$model, df[names(kclusters[kclusters == 1])], price = df$price)
cluster2 <- cbind(model = df$model, df[names(kclusters[kclusters == 2])], price = df$price)
cluster3 <- cbind(model = df$model, df[names(kclusters[kclusters == 3])], price = df$price)
cluster4 <- cbind(model = df$model, df[names(kclusters[kclusters == 4])], price = df$price)
tmp2 <- melt(cluster2, id.vars = c("model","price"), variable.name = "vendor", value.name = "sales")
View(tmp2)
library(reshape2)
tmp1 <- melt(cluster1, id.vars = c("model", "price"), variable.name = "vendor", value.name = "sales")
tmp2 <- melt(cluster2, id.vars = c("model","price"), variable.name = "vendor", value.name = "sales")
tmp3 <- melt(cluster3, id.vars = c("model","price"), variable.name = "vendor", value.name = "sales")
tmp4 <- melt(cluster4, id.vars = c("model","price"), variable.name = "vendor", value.name = "sales")
View(tmp1)
scaled.dat1 <- as.data.frame(scale(tmp1[c(2,4)]))
scaled.dat2 <- as.data.frame(scale(tmp2[c(2,4)]))
scaled.dat3 <- as.data.frame(scale(tmp3[c(2,4)]))
scaled.dat4 <- as.data.frame(scale(tmp4[c(2,4)]))
View(tmp1)
tmp1[inf1,]
tmp1[inf1,] %>%
arrange(desc(sales))
kable(tmp1[inf1,] %>%
arrange(desc(sales)))
